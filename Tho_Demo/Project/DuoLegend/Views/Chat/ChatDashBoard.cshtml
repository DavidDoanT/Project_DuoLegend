@model ChatDashBoardViewModel
@using DuoLegend.DAO
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.5.0/font/bootstrap-icons.css">
<link href="~/css/chatDashBoard.css" rel="stylesheet" />

<!-- bắt đầu làm tại đây -->

<div class="container-fluid p-0" style="height: 88%; ">
    <div class="row no-gutters" style="height: 100%;">
        <div class="col-md-3 col-2" style="height: 100%;">
            <div id="updateOnlineList" class="btn btn-danger">update online list</div>
            <!-- Thanh search danh sách những người đã chat -->
            <div class="search m-4" style="height: 36px;">
                <form>
                    <input class="form-control search-field" placeholder="Search">
                </form>
            </div>

            <div class="list-chat">
                <!-- Danh sách những người đã từng chat -->
                <ul class="list-contact" id="myList">

                    <!--<a href="#" style="text-decoration: none;">
            <li class="person myChoose chosen" data-chat="person1">
                <div class="row justify-content-start align-items-center no-gutters">-->
                    <!-- Avatar -->
                    <!--<div class="user col-auto mr-3">
                <img src="https://www.bootdey.com/img/Content/avatar/avatar3.png" alt="Retail Admin" class="avatar">
                <span class="status busy"></span>
            </div>-->
                    <!-- Tên và thời gian chat lần cuối -->
                    <!--<p class="name-time col-md-auto col-xs-0">
                            <span class="name">Steve Bangalter</span>
                            <br>
                            <span class="time">15/02/2019</span>
                        </p>
                    </div>
                </li>
            </a>-->
                    @if (Model.ListMessageAndUserHaveChatWith != null)
                    {
                        @foreach (var user in Model.ListMessageAndUserHaveChatWith)
                        {
                            <a id='@("id" + user.Key)' asp-controller="Chat" asp-action="ChatDashBoard" asp-route-otherId="@user.Key" style="text-decoration: none;">
                                <li class="@(user.Key == Model.UserOtherId ? "person myChoose chosen" : "person myChoose" )" data-chat="person1">
                                    <div class="row justify-content-start align-items-center no-gutters">
                                        @*Avatar*@
                                        <div class="user col-auto mr-3">
                                            <img src="@Model.UserOtherAvatarPath" alt="Retail Admin" class="avatar">
                                            <span class="status busy"></span>
                                        </div>
                                        @*Tên và thời gian chat lần cuối*@
                                        <p class="name-time col-md-auto col-xs-0">
                                            <span class="name">@UserDAO.getInGameNameServerById(user.Key)[0]</span>
                                            <br>
                                            <span class="time @("content" + user.Key)">@(user.Value.SendFrom == Model.UserSelfId ? "You:" : string.Empty ) @user.Value.Content</span><br>
                                            <span class="time @("content" + user.Key) ">@DuoLegend.Service.TimeProcess.HowLongSince(@user.Value.TimeSend)[0]</span>
                                            <span class="time @("content" + user.Key) ">@DuoLegend.Service.TimeProcess.HowLongSince(@user.Value.TimeSend)[1]</span>
                                        </p>
                                    </div>
                                </li>
                            </a>
                        }
                    }

                </ul>
            </div>
        </div>

        <div class="col-md-9 col-10" style="height: 100%;">
            <!-- Tên và avatar của người hiện tại đang chat -->
            <div class="selected-user">
                <div class="contact-profile row justify-content-start no-gutters align-items-center">
                    <div class="col-auto mr-3">
                        <img src="@Model.UserOtherAvatarPath" alt="contact avatar" class="avatar">
                    </div>
                    <div class="col-auto">
                        @if (Model.ListMessageAndUserHaveChatWith != null)
                        {
                            string[] routeInfor = UserDAO.getInGameNameServerById(Model.UserOtherId);
                            <a asp-controller="Profile" asp-action="Index" asp-route-inGameName="@routeInfor[0]" asp-route-server="@routeInfor[1]" class="contact-name">@UserDAO.getInGameNameServerById(Model.UserOtherId)[0]</a>
                        }
                    </div>
                </div>
            </div>

            <!-- Nội dung chat -->
            <div class="content p-2" id="messagesList">
                <div id="loadOldMessage" class="btn btn-primary" style="margin: 0 auto">testttt</div>
            </div>

            <!-- Ô nhập tin nhắn và nút gửi tin nhắn -->
            <form>
                <input id="sender" value="@Model.UserSelfId" disabled style="display: none">
                <input id="receiver" value="@Model.UserOtherId" disabled style="display: none">
                <div class="form-group input mt-2 mb-0 ml-4 row">
                    <input id="messageInput" rows="3" class="form-control input-field col-md-11 col-10"
                           placeholder="Type your message...">
                    <button class="send-button col-md-1 col-1" type="button" id="sendButton">
                        <i class="bi bi-cursor-fill"
                           style="color: #0084ff; padding: 0;"></i>
                    </button>
                </div>
            </form>
        </div>
    </div>
</div>
@for (int i = 0; i < 3; i++)
{
    <script>test();</script>
}
<button class="btn btn-primary" data-toggle="modal" data-target="#example" id="openChatButton" hidden>Chat</button>
<input id="UserSelfAvatarPath" value="@Model.UserSelfAvatarPath" disabled hidden>
<input id="UserOtherAvatarPath" value="@Model.UserOtherAvatarPath" disabled hidden>
<script>
    //doan nay dai vl, se chuyen thanh file js rieng
    // Add active class to the current button (highlight it)
    var list = document.getElementById("myList");
    var options = list.getElementsByClassName("myChoose");
    for (var i = 0; i < options.length; i++) {
        options[i].addEventListener("click", function () {
            var current = document.getElementsByClassName("chosen");
            current[0].className = current[0].className.replace(" chosen", "");
            this.className += " chosen";
        });
    }
    function Right(div) {
        var textContent = div.textContent;
        var avatarPath = document.getElementById("UserSelfAvatarPath").value;
        div.innerHTML = "";
        div.className = "message message--self";
        var avatarContainer = document.createElement("div");
        var image = document.createElement("img");
        image.className = "msg-avatar";
        image.src = avatarPath;

        avatarContainer.className = "message__avatar";
        avatarContainer.appendChild(image);
        div.appendChild(avatarContainer);
        var chatContentContainer = document.createElement("div");
        chatContentContainer.className = "message__body message--self__body";
        chatContentContainer.textContent = textContent;
        div.appendChild(chatContentContainer);
    }

    function Left(div) {
        var textContent = div.textContent;
        var avatarPath = document.getElementById("UserOtherAvatarPath").value;
        div.innerHTML = "";
        div.className = "message message--other";
        var avatarContainer = document.createElement("div");
        var image = document.createElement("img");
        image.className = "msg-avatar";
        image.src = avatarPath;

        avatarContainer.className = "message__avatar";
        avatarContainer.appendChild(image);
        div.appendChild(avatarContainer);
        var chatContentContainer = document.createElement("div");
        chatContentContainer.className = "message__body";
        chatContentContainer.textContent = textContent;
        div.appendChild(chatContentContainer);
    }

    function openChat() {
        document.getElementById("openChatButton").click();
    }

    function receiveMessageFromOtherBox(senderId, messageContent) {
        var messageList = document.getElementById("myList");
        var floatBox = document.getElementById("id" + senderId);
        messageList.removeChild(floatBox);
        messageList.insertBefore(floatBox, messageList.childNodes[1]);
        var boxContent = document.getElementsByClassName("content" + senderId);
        boxContent[0].innerHTML = messageContent;
        boxContent[1].innerHTML = "just now";
        boxContent[2].innerHTML = "";
    }

    document.getElementById("sendButton").addEventListener("click", function (event) {
        content = document.getElementById("messageInput").value;
        if (content != "") {
            receiveMessageFromOtherBox(document.getElementById("receiver").value, content);
        }
    });
    document.getElementById("loadOldMessage").addEventListener("click", function (event) {
        var sender = document.getElementById("sender").value;
        var receiver = document.getElementById("receiver").value;
        var messageList = document.getElementById("messagesList");
        var loadOldMessageButton = document.getElementById("loadOldMessage");
        var numberOfMessage = messageList.children.length;
        messageList.innerHTML = "";
        messageList.appendChild(loadOldMessageButton);
        connection.invoke("LoadOldMessage", sender, receiver, numberOfMessage).catch(function (err) {
            return console.error(err.toString());
        });
    });

    function test() {
        alert("testt");
    }
</script>
